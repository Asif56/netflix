{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovie","fetchComedyMovie","fetchHorrorMovie","fetchRomanceMovie","fetchDocumentaries","Banner","str","n","setMovie","requests","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAMeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAQ,iC,iCC8DGC,MAvDf,YAA2C,IAA7BC,EAA4B,EAA5BA,MAAMC,EAAsB,EAAtBA,SAASC,EAAa,EAAbA,WAAa,EAEVC,mBAAS,IAFC,mBAE/BC,EAF+B,KAEvBC,EAFuB,OAGHF,mBAAS,IAHN,mBAG/BG,EAH+B,KAGnBC,EAHmB,KAqCtC,OAhCAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAEIN,EAAUM,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CADY,uBAAC,WAAD,wBAMZG,KAED,CAACb,IAyBA,sBAAKc,UAAU,MAAf,UACI,6BAAKf,IACL,qBAAKe,UAAU,cAAf,SACKX,EAAOY,KAAI,SAAAC,GAAK,OACpB,qBAEAC,QAAS,kBArBA,SAACD,GACZX,EACCC,EAAc,IAEdY,KAAkB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IAC3BC,MAAK,SAACC,GACN,IAAMC,EAAY,IAAIC,gBAAgB,IAAIC,IAAIH,GAAKI,QACnDnB,EAAcgB,EAAUb,IAAI,SAE5BiB,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAYdG,CAAYd,IACzBF,UAAS,qBAAgBb,GAAc,mBAA9B,KACT8B,IAAG,UAhDF,wCAgDE,OAAe9B,EAAae,EAAMgB,YAAYhB,EAAMiB,eACtDC,IAAKlB,EAAMG,MAJPH,EAAMmB,SAOZ9B,GAAc,cAAC,IAAD,CAAS+B,QAAS/B,EAAYgC,KAnCzC,CACPC,OAAO,MACPC,MAAM,OACNC,WAAW,CACPC,SAAS,UC7BfC,EAAQ,mCAaChC,EAXC,CACZiC,cAAc,8BAAD,OAA+BD,EAA/B,mBACbE,sBAAsB,wBAAD,OAAyBF,EAAzB,sBACrBG,cAAc,4BAAD,OAA6BH,EAA7B,mBACbI,iBAAiB,2BAAD,OAA4BJ,EAA5B,mBAChBK,iBAAiB,2BAAD,OAA4BL,EAA5B,mBAChBM,iBAAiB,2BAAD,OAA4BN,EAA5B,mBAChBO,kBAAkB,2BAAD,OAA4BP,EAA5B,sBACjBQ,mBAAmB,2BAAD,OAA4BR,EAA5B,oB,MC6CPS,MAhDf,WAAmB,IAkBGC,EAAIC,EAlBR,EACWnD,mBAAS,IADpB,mBACPc,EADO,KACAsC,EADA,KAqBhB,OAlBE/C,qBAAU,WAAM,4CACb,4BAAAC,EAAA,sEACsBb,EAAMc,IAAI8C,EAASX,uBADzC,cACOlC,EADP,OAEC4C,EACI5C,EAAQC,KAAKC,QACT4C,KAAKC,MAAMD,KAAKE,SAAWhD,EAAQC,KAAKC,QAAQ+C,UAJzD,kBAOQjD,GAPR,4CADa,uBAAC,WAAD,wBAUbG,KACA,IAEHe,QAAQC,IAAIb,GAMb,yBAAQF,UAAU,SAClB8C,MAAO,CACHC,eAAe,QACfC,gBAAgB,4CAAD,cAA6C9C,QAA7C,IAA6CA,OAA7C,EAA6CA,EAAOiB,cAApD,MACf8B,mBAAmB,iBAJvB,UAOG,sBAAKjD,UAAU,kBAAf,UACE,oBAAIA,UAAU,eAAd,UACU,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAciB,QAAd,IAAcA,OAAd,EAAcA,EAAOG,QAArB,OAA2BH,QAA3B,IAA2BA,OAA3B,EAA2BA,EAAOgD,iBAEvC,sBAAKlD,UAAU,iBAAf,UACE,wBAAQA,UAAU,gBAAlB,kBACA,wBAAQA,UAAU,gBAAlB,wBAGF,oBAAIA,UAAU,qBAAd,UApBcsC,EAqBD,OAACpC,QAAD,IAACA,OAAD,EAACA,EAAOiD,SArBHZ,EAqBY,KApBvB,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKO,QAASN,EAAID,EAAIc,OAAO,EAAEb,EAAE,GAAK,MAAQD,QAwBpD,qBAAKtC,UAAU,2B,MCnBNqD,MA5Bf,WAAgB,IAAD,EAEajE,oBAAS,GAFtB,mBAEJkE,EAFI,KAECC,EAFD,KAeb,OAXE9D,qBAAU,WAMP,OALA+D,OAAOC,iBAAiB,UAAS,WAC1BD,OAAOE,QAAQ,IAChBH,GAAW,GACPA,GAAW,MAEd,WACHC,OAAOG,oBAAoB,aAEhC,IAGF,sBAAK3D,UAAS,cAASsD,GAAQ,aAA/B,UACE,qBAAKtD,UAAU,WACfiB,IAAI,oHAEJ,qBACAjB,UAAU,aACViB,IAAI,4HCCK2C,MAnBf,WACE,OACE,sBAAK5D,UAAU,MAAf,UACA,cAAC,EAAD,IACC,cAAC,EAAD,IACA,cAAC,EAAD,CAAKf,MAAM,mBAAmBC,SAAUU,EAAQkC,sBAAuB3C,YAAY,IACnF,cAAC,EAAD,CAAKF,MAAM,eAAgBC,SAAUU,EAAQiC,gBAC7C,cAAC,EAAD,CAAK5C,MAAM,YAAaC,SAAUU,EAAQmC,gBAC1C,cAAC,EAAD,CAAK9C,MAAM,eAAgBC,SAAUU,EAAQoC,mBAC7C,cAAC,EAAD,CAAK/C,MAAM,eAAgBC,SAAUU,EAAQqC,mBAC7C,cAAC,EAAD,CAAKhD,MAAM,eAAgBC,SAAUU,EAAQsC,mBAC7C,cAAC,EAAD,CAAKjD,MAAM,gBAAiBC,SAAUU,EAAQuC,oBAC9C,cAAC,EAAD,CAAKlD,MAAM,gBAAiBC,SAAUU,EAAQwC,yBCPpCyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.489f5932.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;","// import Axios from 'axios';\r\nimport React, {useState,useEffect} from 'react';\r\nimport axios from './axios' \r\nimport './Row.css'\r\nimport YouTube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\n\r\nconst baseUrl=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    \r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl ,setTrailerUrl] =useState('');\r\n    \r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData();\r\n\r\n    }, [fetchUrl])\r\n\r\n    const opts={\r\n        height:\"400\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            autoplay:1,\r\n        },\r\n    };\r\n\r\n    const handleClick=(movie)=>{\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\")\r\n        }else{\r\n            movieTrailer(movie?.name || '')\r\n            .then((url)=>{\r\n             const urlParams = new URLSearchParams(new URL(url).search);\r\n             setTrailerUrl(urlParams.get('v'))\r\n            })\r\n            .catch((error)=>console.log(error))\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className='row'>\r\n            <h2>{title}</h2>\r\n            <div className=\"row_posters\">\r\n                {movies.map(movie=>(\r\n             <img \r\n             key={movie.id}\r\n             onClick={()=>handleClick(movie)}\r\n             className={`row_poster ${isLargeRow && \"row_posterLarger\"} `} \r\n             src={`${baseUrl}${isLargeRow ? movie.poster_path:movie.backdrop_path}`}\r\n              alt={movie.name} />\r\n                ))}\r\n            </div>\r\n           {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","const API_KEY='770088aaebc6a0cd3b76c9fad4b7d880';\r\n\r\nconst request = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovie:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovie:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovie:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovie:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default request;","import React,{useState,useEffect} from 'react'\r\nimport './Banner.css'\r\nimport requests from './request'\r\nimport axios from './axios'\r\n\r\nconst baseUrl=\"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie]= useState([]);\r\n\r\n    useEffect(() => {\r\n       async function fetchData(){\r\n        const request =await axios.get(requests.fetchNetflixOriginals)\r\n        setMovie(\r\n            request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length)\r\n            ]\r\n        );\r\n        return request;\r\n       }\r\n       fetchData();\r\n    }, [])\r\n\r\n    console.log(movie)\r\n\r\n    function truncate(str,n){\r\n     return str?.length > n ? str.substr(0,n-1) + \"...\" : str;\r\n    }\r\n  return (\r\n   <header className='banner'\r\n   style={{\r\n       backgroundSize:\"cover\",\r\n       backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n       backgroundPosition:\"center center\"\r\n   }}\r\n   >\r\n      <div className=\"banner_contents\">\r\n        <h1 className='banner_title'>\r\n            {movie?.title||movie?.name||movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List</button>\r\n\r\n        </div>\r\n        <h1 className=\"banner_description\">\r\n            {truncate(movie?.overview,150)}\r\n        </h1>\r\n        \r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n   </header>\r\n  )\r\n}\r\n\r\nexport default Banner\r\n","import React,{useState,useEffect} from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n\r\n    const [show,handleShow]=useState(false)\r\n\r\n    useEffect(()=>{\r\n       window.addEventListener(\"scroll\",()=>{\r\n           if(window.scrollY>100){\r\n             handleShow(true)\r\n           }else handleShow(false)\r\n       });\r\n       return ()=>{\r\n           window.removeEventListener(\"scroll\")\r\n       };\r\n    },[])\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img className='nav_logo' \r\n      src='https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png'\r\n      />\r\n      <img \r\n      className='nav_avatar'\r\n      src='https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Netflix_2015_N_logo.svg/800px-Netflix_2015_N_logo.svg.png'\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Row from './Row'\nimport request from './request'\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n    <Nav/>\n     <Banner/>\n     <Row title='NETFLIX ORIGINAL' fetchUrl={request.fetchNetflixOriginals} isLargeRow={true} />\n     <Row title='Trending row'  fetchUrl={request.fetchTrending}/>\n     <Row title='Top Rated'  fetchUrl={request.fetchTopRated}/>\n     <Row title='Action Movie'  fetchUrl={request.fetchActionMovie}/>\n     <Row title='Comedy Movie'  fetchUrl={request.fetchComedyMovie}/>\n     <Row title='Horror Movie'  fetchUrl={request.fetchHorrorMovie}/>\n     <Row title='Romance Movie'  fetchUrl={request.fetchRomanceMovie}/>\n     <Row title='Documentaries'  fetchUrl={request.fetchDocumentaries}/>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}